---
title: "Class 13: RNA-Seq Analysis Mini-Project"
author: "Patrick Tran"
format: pdf
---

## Pathway Analysis from RNA-Seq Results

Pathway analysis (also known as gene set analysis or over-representation analysis), aims to reduce the complexity of interpreting gene lists via mapping the listed genes to known (i.e. annotated) biological pathways, processes and functions.

# Read the countData and colData

Download the count data and associated metadata.

```{r}
library(DESeq2)
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"

# Import metadata and take a peak

colData = read.csv(metaFile, row.names=1)
head(colData)
```

```{r}
# Import countdata
countData = read.csv(countFile, row.names=1)
head(countData)
```
> Q1. Complete the code below to remove the troublesome first column from `countData`

```{r}
# Note we need to remove the odd first $length col
countData <- as.matrix(countData[,-1])
head(countData)
```

> Q2. Complete the code below to filter `countData` to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

```{r}
# Filter count data where you have 0 read count across all samples.
countData = countData[rowSums(countData[])>0,]
head(countData)
```

# Running DESeq2

Let's setup the DESeqDataSet object required for the `DESeq()` function

```{r}
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
dds = DESeq(dds)
```

```{r}
dds
```

Get results for the HoxA1 knockdown versus control siRNA. These are labeled as `hoxa1_kd` and `control_sirna`.

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```

> Q3. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

# Volcano Plot

Let's visualize our data.

```{r}
plot( res$log2FoldChange, -log(res$padj) )
```

> Q4. Improve this plot by completing the below code, which adds color and axis labels.

```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```

# Adding gene annotation

Our pathway analysis downstream will use KEGG pathways, and genes in KEGG pathways are annotated with Entrez gene IDs.

> Q5. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

> Q6. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file ="deseq_results.csv")
```

# Pathway Analysis

Install the required bioconductor packages. Load the packages and setup the KEGG data sets we need.

```{r}
library(pathview)
```

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

We have the fold change results from DESeq2 analysis.

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Let's run the `gage` pathway analysis and look at the object from `gage()`

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

Let's look at the first few down pathways.

```{r}
head(keggres$less)
```

Let's use the `pathview()` function to make a pathway plot.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

```{r}
knitr::include_graphics("hsa04110.pathview.png")
```

Let's focus on the top 5 unregulated pathways.

```{r}
keggrespathways <- rownames(keggres$greater)[1:5]

keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

These are the resulting plots:

```{r}
knitr::include_graphics("hsa04640.pathview.png")
knitr::include_graphics("hsa04630.pathview.png")
knitr::include_graphics("hsa00140.pathview.png")
knitr::include_graphics("hsa04142.pathview.png")
knitr::include_graphics("hsa04330.pathview.png")
```

> Q7. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

Yes, using the `less` attribute.

```{r}
keggrespathwaysless <- rownames(keggres$less)[1:5]

keggresids = substr(keggrespathwaysless, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

These are the resulting plots:

```{r}
knitr::include_graphics("hsa04110.pathview.png")
knitr::include_graphics("hsa03030.pathview.png")
knitr::include_graphics("hsa03013.pathview.png")
knitr::include_graphics("hsa03440.pathview.png")
knitr::include_graphics("hsa04114.pathview.png")
```

# Gene Ontology

We can do a similar procedure with gene ontology focusing on Biological Process.

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

# Reactome Analysis

Reactome is a database consisting of biological molecules and their relation to pathways and processes. Let's conduct over-representation analysis and pathway-topology analysis with Reactome.

```{r}
# Output list of significant genes at the 0.05 level
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

> Q8: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The Endosomal/Vacuolar pathway has the most significant Entities p-value (1.51E-4). This pathway did not show up in the previous KEGG results. The second most significant Entities p-value was the cell cycle pathway that did show up in the KEGG results. Differences may arise from the samples used in the dataset.

