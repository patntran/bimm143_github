---
title: "Machine Learning 1"
author: "Patrick Tran"
format: pdf
---

# First up kmeans()

Demo for using kmeans() function in base R. First make up some data with a known structure.

```{r}
tmp <- c(rnorm(30, -3), rnorm(30,3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

Now we have some made up data in `x` let's see how kmeans works with this data

```{r}
k <- kmeans(x, centers=2, nstart=20)
k
```

> Q. How many points are in each cluster?

```{r}
k$size
```

> Q. How do we get to the cluster membership/assignment?

```{r}
k$cluster
```

> Q. What about cluster centers?

```{r}
k$centers
```

Now we got to the main results let's use them to plot our data with the kmeans result.

```{r}
plot(x, col=k$cluster)
points(k$centers, col="blue", pch=15)
```

## Now for Hierarchial Clustering

We will cluster the same data `x` with the `hclust()`. In this case `hclust()` requires a distance matrix as input.

```{r}
hc <- hclust(dist(x))
hc
```

Let's plot our hclust result

```{r}
plot(hc)
```

To get our cluster membership vector we need to "cut" the tree with `cutree()`

```{r}
grps <- cutree(hc, h=8)
grps
```

Now we plot our data with the hclust() results.

```{r}
plot(x, col=grps)
```

# Principal Component Analysis(PCA)

## PCA of UK food data

Read data from website and try a few visualizations.

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names=1)
x
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
#Should be 17 rows and 5 columns before minus indexing.
dim(x)
ncol(x)
nrow(x)
```

> Q2. Which approach to solving the `row-names problem` mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer to use the argument setting `row.names=1`. It is more robust and you can run the block multiple times. If you use `x <- x[,-1]` repeatedly, it will delete columns. 

```{r}
cols <- rainbow(nrow(x))
barplot(as.matrix(x), col=cols)
```

```{r}
barplot(as.matrix(x), col=cols, beside = TRUE)
```

> Q3. Changing what optional argument in the above barplot() function results in the following plot?

Changing it to `beside=FALSE` in the barplot() code.

```{r}
pairs(x, col=cols)
```

> Q5. Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

This plot shows all possible pairs of countries against each other. This is a matrix of plots. If a given point lies on the diagonal for a given plot then it means that the countries are similar.

> Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

N. Ireland differs in values compared to the other countries of the UK. The points on the plot do not follow the diagonal line pattern. We observe less of a trend.

PCA to the rescue!!
The main base R PCA function is called `prcomp()` and we will need to give it the transpose of our input data!

```{r}
pca <- prcomp(t(x))
```

```{r}
attributes(pca)
```

> Q7. Complete the code below to generate a plot of PC1 vs PC2. THe second line adds labels over the data points.

To make our new PCA plot (a.k.a. PCA score plot) we access `pca$x`

```{r}
plot(pca$x[,1], pca$x[,2])
text(pca$x[,1], pca$x[,2], colnames(x))
```

> Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

Color up the plot
```{r}
country_cols <- c("orange", "red", "blue", "green")
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
text(pca$x[,1], pca$x[,2], colnames(x), col=country_cols)
```

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```

```{r}
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

Digging Deeper

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```

> Q9. Generate a similar 'loading plot' for PC2. What two food groups feature prominantely and what does PC2 mainly tell us about?

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```

The 2 prominent groups are `Fresh_potatoes` and `Soft_drinks`. Fresh potatoes push to right positive side of plot. Soft drinks push to left side of plot.

```{r}
biplot(pca)
```


## PCA of RNA-Seq data

Read in data from website

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

> Q10. How many genes are samples are in this data set?

```{r}
dim(rna.data)
#100 genes, 10 samples
```

There is a nice summary of how well PCA is doing

```{r}
pca <- prcomp(t(rna.data))
summary(pca)
```

Do our PCA plot of this RNA-Seq data

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
plot(pca, main="Quick scree plot")
```

```{r}
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```

```{r}
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```

```{r}
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
     xlab=paste0("PC1 (", pca.var.per[1], "%)"),
     ylab=paste0("PC2 (", pca.var.per[2], "%)"))

text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))
```

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

ggplot(df) + 
  aes(PC1, PC2) + 
  geom_point()
```

```{r}
df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)
p
```

```{r}
p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()
```

