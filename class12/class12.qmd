---
title: "Class 12: Differential Expression Analysis"
author: "Patrick Tran"
format: pdf
---

## Analysis of RNA-Seq data

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

# Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

Take a look at each.

```{r}
head(counts)
```

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

38694 genes are in this dataset.

```{r}
ncol(counts)
```

and the metadata a.k.a "colData"

```{r}
(metadata)
```

Let's make sure that the id column of the metadata match the order of the columns in countData. 

```{r}
metadata$id == colnames(counts)
```

We can use the `all()` function to check that all it's inputs are true.

```{r}
all(c(T,T,T, F))
```

```{r}
all(metadata$id == colnames(counts))
```

> Q2. How many ‘control’ cell lines do we have?

There are 4 control cell lines.


# Analysis by hand

```{r}
metadata
```
Let's first extract our counts for control samples as I want to compare this to the counts for treated (i.e with drug) samples.

```{r}
control.inds <- metadata$dex == "control"
control.ids <- metadata$id[control.inds]
control.counts <- counts[, control.ids]
head(control.counts)
```

I want a single summary counts value for each gene in the control experiments. I will start by taking the average.

```{r}
control.mean <- rowMeans(control.counts)
head(control.mean)

#apply(control.counts, 1, mean)
```

> Q3. How would you make the above code in either approach more robust?

Instead of dividing the sum by the amount of samples, you can use the `rowMeans()` call or use `apply(x,1,mean)`. This will give you the average without needing to find the n samples.

> Q4. Follow the same procedure for the `treated` samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called `treated.mean`)

Let's get the average for all of our treated samples.

```{r}
treated.inds <- metadata$dex == "treated"
treated.ids <- metadata$id[treated.inds]
treated.counts <- counts[, treated.ids]
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

To help us stay organized let's make a new data.frame to store these results together.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

And make a wee plot

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts$control.mean, meancounts$treated.mean)
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)
ggplot(meancounts, aes(meancounts$control.mean, meancounts$treated.mean)) +
  geom_point()
```

You would use `geom_point()`.


This screams for a log transformation so we can see our data.

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

The `log="xy"` argument for plot() allows for plotting both axes on a log scale.

```{r}
plot(meancounts$control.mean, meancounts$treated.mean, log="xy")
```

The most useful and most straight forward to understand is log2 transform.

```{r}
20/20
```

Doubling

```{r}
log2(40/20)
```

```{r}
log2(10/20)
```

```{r}
log2(80/20)
```

add a "log2 fold-change"

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
```

```{r}
head(meancounts)
```

Hmmm... we need to get rid of the genes where we have no count data as taking the log2 of these 0 counts does not tell us anything.

```{r}
head( meancounts == 0)
```

```{r}
#zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
#to.rm <- unique(zero.vals[,1])
#mycounts <- meancounts[-to.rm,]
#head(mycounts)

to.keep <- rowSums(meancounts[,1:2] == 0) == 0

mycounts <- meancounts[to.keep,]
head(mycounts)
```
>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The `arr.ind=TRUE` argument in the which() function call returns the row and column indicies where TRUE values exist. It tells which genes and samples have zero counts so we can ignore them. The `unique()` function makes sure that there are no repetitive counting of the rows. 


Let's see how many are up-regulated at the log2fc level of +2

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc >= +2)
```

and down regulated...

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc <= -2)
```

> Q10. Do you trust these results? Why or why not?

No. The analysis is based on fold change. Fold change measures the magnitude of quantity change between an original and subsequent measurement. The value can be large without being statistically significant. We need to analyze statistical significants and the results as of now can be misleading.

We are missing the stats. Are these big changes significant?

# DESeq2 analysis

```{r}
#| message: false
library(DESeq2)
```

Like most bioconductor packages DESeq wants it's input and output in a very specific format. 

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

The main DESeq function is called DESeq

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
head(res)
```

# Volcano plots

A major summary figure of this type of analysis is called a volcano plot - the idea here is to keep our inner biologist and inner stats person happy with one cool plot!

```{r}
plot(res$log2FoldChange, res$padj)
```
Improve this plot by taking the log of that p-value axis

```{r}
plot(res$log2FoldChange, log(res$padj))
```

I want to flip this y-axis so the values I care about (i.e. the low p-value or high log(p-values)) are at the top of the axis.
```{r}
plot(res$log2FoldChange, -log(res$padj))
```

Add color to the volcano plot by setting up a custom color vector.

```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) >= 2] <- "blue"
#mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 
mycols[res$padj > 0.05] <- "gray"
#inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
#mycols[ inds ] <- "blue"
  
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )
abline(v=c(-2,2), lty=2)
```

