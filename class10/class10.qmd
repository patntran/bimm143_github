---
title: "Class 10: Halloween Mini-Project"
author: "Patrick Tran"
format: pdf
always_allow_html: yes
---

# Importing candy data

First, let's get the data from the FiveThirtyEight GitHub repo.

```{r}
candy_file <- "candy-data.csv"

candy = read.csv(candy_file, row.names=1)
head(candy)
```

> Q1. How many different candy types are in this dataset?

```{r}
nrow(candy)
```
85 candy types.

> Q2. How many fruity candy types are in the dataset?

```{r}
sum(candy$fruity)
```
38 fruity candy types.


# What is your favorite candy?

For a given candy, `winpercent` is the percentage of people who prefer this candy over another randomly chosen candy from the dataset. Higher values indicate a more popular candy.

Example code for Twix:

```{r}
candy["Twix",]$winpercent
```

> Q3. What is your favorite candy in the dataset and what is it's winpercent value?

I like Swedish Fish.

```{r}
candy["Swedish Fish",]$winpercent
```

> Q4. What is the `winpercent` value for "Kit Kat"?

```{r}
candy["Kit Kat",]$winpercent
```

> Q5. What is the `winpercent` value for "Tootsie Roll Snack Bars"?

```{r}
candy["Tootsie Roll Snack Bars",]$winpercent
```

The `skim()` function helps give a quick overview of a given dataset.

```{r}
library("skimr")
skim(candy)
```

> Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

12 of the 12 total columns are numeric type. There are no group variables. 

> Q7. What do you think a zero and one represent for the `candy$chocolate` column?

```{r}
skim(candy$chocolate)
```
The 0 means the candy is not chocolate. The 1 means the candy is chocolate.

> Q8. Plot a histogram of `winpercent` values

```{r}
library(ggplot2)
ggplot(candy, aes(x=winpercent)) +
  geom_histogram()
```

> Q9. Is the distribution of `winpercent` values symmetrical?

No, the distribution is slightly right skewed.

> Q10. Is the center of the distribution above or below 50%?

The center of distribution is below 50%.

> Q11. On average is chocolate candy higher or lower ranked than fruit candy?

```{r}
mean(candy$winpercent[as.logical(candy$chocolate)])
mean(candy$winpercent[as.logical(candy$fruity)])
t.test(candy$winpercent[as.logical(candy$chocolate)],candy$winpercent[as.logical(candy$fruity)])
```

On average, chocolate candy is higher ranked than fruit candy.

> Q12. Is this difference statistically significant?

Since the p-value of 2.871e-08 is less than 0.05, the difference is statistically significant.


#Overall candy rankings

Use base R `order()` function together with `head()` to sort the whole dataset by `winpercent`. Or use *dplyr* package using `arrange()` function with `head()` to do the same.

> Q13. What are the five least liked candy types in this set?

```{r}
library(dplyr)
candy %>%
  arrange(winpercent) %>%
  head(5)
```

> Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
library(dplyr)
candy %>%
  arrange(winpercent) %>%
  tail(5)
```

We can make a barplot to visualize the overall rankings.

> Q15. Make a first barplot of candy ranking based on `winpercent` values.

```{r}
library(ggplot2)

ggplot(candy)+
  aes(winpercent, rownames(candy)) +
  geom_col()
```

> Q16. This is quite ugly, use the `reorder()` function to get the bars sorted by `winpercent`?

```{r}
library(ggplot2)

ggplot(candy)+
  aes(winpercent, reorder(rownames(candy), winpercent)) +
  geom_col()
```

Setup a color vector that we can use for future plots.

```{r}
my_cols=rep("black", nrow(candy))
my_cols[as.logical(candy$chocolate)] = "chocolate"
my_cols[as.logical(candy$bar)] = "brown"
my_cols[as.logical(candy$fruity)] = "pink"
```

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col(fill=my_cols) 
```

> Q17. What is the worst ranked chocolate candy?

Sixlets

> Q18. What is the best ranked fruity candy?

Starbursts


# Taking a look at pricepercent

What about value for money or the best candy for the least money? We can make a plot of `winpercent` vs the `pricepercent` variable. `pricepercent` variable records the percentile rank of the candy's price against all of the other candies in the dataset.

```{r}
library(ggrepel)

# How about a plot of price vs win
ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy))+
  geom_point(col=my_cols) +
  geom_text_repel(col=my_cols, size=3.3, max.overlaps=5)
```

> Q19. Which candy type is the highest ranked in terms of `winpercent` for the least money -i.e. offers the most bang for your buck?

Reese's Miniatures 

> Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

```{r}
ord <- order(candy$pricepercent, decreasing=TRUE)
head(candy[ord,c(11,12)], n=5)
```

Nik L Nip is the least popular out of the top 5 most expensive candy types. 

# Exploring the correlation structure

We'll see how the variables interact with one another by using correlation and viewing the results with the *corrplot* package to plot a correlation matrix

```{r}
library(corrplot)
cij <- cor(candy)
corrplot(cij)
```

> Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?

Fruity and chocolate are the most anti-correlated. Bar and pluribus are also anti-correlated.

> Q23. Similarly, what two variables are most positively coorelated?

Chocolate and bar are the most positively correlated.


# Principal Component Analysis

Let's apply PCA using the `prcom()` function to our candy dataset remembering to set the the `scale=TRUE` argument.

```{r}
pca <- prcomp(candy, scale=TRUE)
summary(pca)
```

Now we can plot our main PCA score plot of PC1 vs PC2.

```{r}
plot(pca$x[,1:2])
```

We can change the plotting character and add some color:

```{r}
plot(pca$x[,1:2], col=my_cols, pch=16)
```

We can make a nicer plot with the `ggplot2` package.

```{r}
my_data <- cbind(candy,pca$x[,1:3])
p <- ggplot(my_data)+
  aes(x=PC1, y=PC2,
      size=winpercent/100,
      text=rownames(my_data),
      label=rownames(my_data))+
  geom_point(col=my_cols)
p
```

We can use `ggrepel` package to label up the plot with non-overlapping candy names like. 

```{r}
library(ggrepel)

p + geom_text_repel(size=3.3, col=my_cols, max.overlaps=7)+
  theme(legend.position="none")+
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (darkbrown), chocolate other (light brown), fruity (red), other (black)", 
       caption="Data from 538")
```

Pass the ggplot object to `plotly` like so to generate and interactive plot.

```{r}
library(plotly)
ggplotly(p)
```

Let's finish by taking a quick look at PCA our loadings.

```{r}
par(mar=c(8,4,2,2))
barplot(pca$rotation[,1], las=2, ylab="PC1 Contribution")
```

> Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

Fruity, hard, and pluribus are picked up strongly by PC1 in the positive direction. It makes sense. Fruity candies come in a bag or box of multiple candies.
